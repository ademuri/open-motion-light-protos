syntax = "proto3";

// Note: `optional` is needed for nanopb to generate `has_foo` functions.
message SerialRequest {
  optional bool request_config = 1;
  optional ConfigPb config = 2;
}

message SerialResponse {
  optional StatusPb status = 1;
  optional ConfigPb config = 2;
}

enum BrightnessMode {
  BRIGHTNESS_MODE_UNSPECIFIED = 0;
  BRIGHTNESS_MODE_DISABLED = 1;
  BRIGHTNESS_MODE_ON_WHEN_BELOW = 2;
}

enum ProximityMode {
  PROXIMITY_MODE_UNSPECIFIED = 0;
  PROXIMITY_MODE_DISABLED = 1;
  PROXIMITY_MODE_TOGGLE = 2;
}

enum MotionSensitivity {
  MOTION_SENSITIVITY_UNSPECIFIED = 0;
  MOTION_SENSITIVITY_ONE = 1; // 0
  MOTION_SENSITIVITY_TWO = 2; // 1M
  MOTION_SENSITIVITY_THREE = 3; // 2M + 1M + 1M
}

// Roughly follows semantic versioning
// TODO: more precisely define what these mean.
message HardwareVersion {
  uint32 major = 1;
  uint32 minor = 2;
  uint32 subrevision = 3;
}

message ConfigPb {
  // Version of this config data. Since this struct is read directly from flash,
  // updates need to only add fields to this struct, or risk breaking "parsing".
  // This version will allow for breaking changes, if needed.
  uint32 version = 1;

  optional HardwareVersion hardwareVersion = 13;

  BrightnessMode brightnessMode = 2;

  // This is units of 1/4 lux - a value of 4000 corresponds to 1000 lux.
  uint32 autoBrightnessThreshold = 3;

  ProximityMode proximity_mode = 4;

  // Turn off the light if it's been on for this long in proximity toggle mode.
  uint32 proximity_toggle_timeout_seconds = 5;

  // The proximity sensor must change by this much to toggle the mode.
  uint32 proximity_threshold = 6;

  // How long the light is on for when triggered, in seconds.
  uint32 motion_timeout_seconds = 7;

  // Duty cycle for the main LEDs. 255 is max, 0 is off.
  uint32 led_duty_cycle = 8;

  // Low battery cutoff voltage, in millivolts. This is considered to be the
  // "empty" point for the battery. Below this voltage, the device goes into a
  // lower-power mode to minimize battery drain
  uint32 low_battery_cutoff_millivolts = 9;

  // Hysteresis voltage, in millivolts. Once the battery is low, it must exceed
  // this voltage before the device will turn on again.
  uint32 low_battery_hysteresis_threshold_millivolts = 10;

  // When turning on, the light will take this long to fade in.
  uint32 ramp_up_time_ms = 11;

  // When turning off, the light will take this long to fade out.
  uint32 ramp_down_time_ms = 12;

  // Used to configure the sensitivity of the motion sensor.
  MotionSensitivity motion_sensitivity = 14;
}

message StatusPb {
  // Firmware version string, e.g. `v1.0.0`.
  optional string firmware_version = 1;

  // Current state of the battery, in millivolts. Since the battery is charged
  // while USB is connected, this is not an accurate reflection of the state of
  // charge.
  optional uint32 battery_voltage_millivolts = 2;

  // Raw proximity sensor value.
  optional uint32 proximity_value = 3;

  // Raw ambient light sensor value, in 1/4 Lux.
  optional uint32 ambient_light_value = 4;
};
